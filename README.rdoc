= Synopsis

Have you ever wanted to run a simple command, but the command needed a configuration file? You could create a configuration file, but if you want to run the command slightly different you have to change the configuration file again... at this point I normally gave up - but now the solution is 'it'.

Inline Template: Crate a "wrapper" command that contains a configurable configuration file inline. Use pure ruby and ERB to create your configuration on the fly, and the command will be executed for you.

== Example

I wanted to create a simple "Lenny" bootstraped jail with multistrap, I thought I could run something like:

  root@localhost# multistrap --suite lenny --directory /tmp/lenny_chroot

But when running the command, this is the result:

  root@localhost# multistrap
  Need a configuration file - use multistrap -f

An the documentation doesn't help either:

  multistrap [-a ARCH] [-d DIR] -f CONFIG_FILE

And the solution is a 'it' script - you can use pure ruby and ERB.
x
Have a look at the example file in "examples/multistrap.it".

To try it download the repo and execute the script with:

  ruby bin/it examples/multistrap.it --directory /tmp/lenny-chroot --suite lenny

You need to have multistrap package installed: apt-get install multistrap

== Install

Checkout and execute

  ruby setup.rb

Or you can execute any it script with

  ruby bin/it yourscript.it --abc test --dry-run

== Documentation

It scripts are pure ruby and extended by some functions. Here an explanation based on the multistrap example:

=== Command to execute

  command ["multistrap", "-f", :config_file]

This defines command array that should be executed after the configuration file is generated. :config_file will be replaced with the temporary saved configuration file.

E.g. this

  ruby bin/it multistrap.it --directory PATH

would execute something like:

  $ multistrap -f /tmp/config_file-12879344

=== New arguments for configuring your template

  attributes ["--suite","--directory","--arch"]

With attributes you can define new parameters for your script. These parameters can be used in the script e.g. with @directory. Compare Template section. Any not listed parameter will be forwarded to the command that will be executed.

E.g. this

  ruby bin/it multistrap.it --directory PATH --xyz VAL

would execute something like:

  $ multistrap -f /tmp/config_file-12312312 --xyz VAL

=== Template

  config_file <<EOF
  [General]
  arch=<%= @arch or %x{dpkg-architecture|grep DEB_HOST_ARCH=}.split("=")[1].strip %>
  directory=<%= @directory or raise "Where to install? Please add parameter --directory DIR" %>
  # same as --tidy-up option if set to true
  ...
  source=http://ftp.ch.debian.org/debian
  keyring=debian-archive-keyring
  suite=<%= @suite or raise "What suite? Please add --suite SUITE. E.g. lenny" %>
  EOF

Defines the configuration file to generate. This is a ruby ERB template. Compare ruby ERB documenation. All parameters that are listened in attributes can be used in the template as instance variables.

E.g. this

  config_file <<EOF
  # anything can be inserted
  <%= @directory %>
  arch: <%= @arch.upcase %>
  EOF

executed with

  ruby bin/it multistrap.it --directory /tmp/test --arch foo --xyz --test BLA

would generate a temporary configuration file:

  # anything can be inserted
  /tmp/test
  arch: FOO

and then execute the command:

  multistrap -f /tmp/config_file-12312313 --xyz --test BLA

=== dry-run

If you add a parameter --dry-run, the generated configuration and the command that would be executed will printed on your console. The command is not executed.

E.g.

  ruby bin/it multistrap.it --direc...xyz --test BLA --dry-run

No damage! TRY IT! :-)

== Note

Don't be afraid of exceptions, I used them to output errors for the user. Read them and descide if you have to provide more parameters.

== TODO

* Add nicer error messages
* Add tests
